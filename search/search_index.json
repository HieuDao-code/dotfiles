{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Setup","text":""},{"location":"#installation","title":"Installation","text":"<ul> <li>Install git.</li> <li>Clone this git repository by running the command below (Linux and Mac):</li> </ul> <pre><code>git clone https://github.com/HieuDao-code/dotfiles.git $HOME/.dotfiles\n</code></pre> <p>Execute the install script:</p> <pre><code>cd $HOME/.dotfiles\n./install.sh\n</code></pre> <p>You might have to give permission to execute the file:</p> <pre><code>chmod -x $HOME/.dotfiles/install.sh\n</code></pre>"},{"location":"alacritty/","title":"Alacritty","text":"<p>Alacritty is a modern terminal emulator that comes with sensible defaults, but allows for extensive configuration. By integrating with other applications, rather than reimplementing their functionality, it manages to provide a flexible set of features with high performance.</p>"},{"location":"alacritty/#installation","title":"Installation","text":"<p>Install instructions</p> <p>Use Snap:</p> <pre><code># Install Alacritty\nsudo apt update\nsudo apt install snapd\nsudo snap install alacritty --classic\n</code></pre> <p>Set Alacritty as default terminal:</p> <pre><code>sudo update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator $(which alacritty) 50\nsudo update-alternatives --config x-terminal-emulator\n</code></pre> <p>For MacOS:</p> <pre><code>brew install --cask alacritty\n</code></pre>"},{"location":"key_binding/","title":"Key bindings","text":"<ul> <li><code>&lt;CR&gt;</code> Enter</li> <li><code>&lt;M&gt;</code> Meta (Alt, Option on Mac)</li> </ul>"},{"location":"key_binding/#information","title":"Information","text":"<ul> <li><code>&lt;space&gt;</code> leader key</li> <li><code>:checkhealth [&lt;pluginname&gt;]</code> check base or plugin status</li> <li><code>:checkhealth lsp</code> show details of LSP attached to buffer</li> <li><code>:Lazy</code> or <code>&lt;leader&gt;l</code> show package manager UI</li> <li><code>:Lazy profile</code> show startup time</li> <li><code>:Mason</code> or <code>&lt;leader&gt;M</code> show Mason UI</li> <li><code>:TSUpdate</code> update all Tree-sitter parsers</li> <li><code>:ConformInfo</code> autoformatter information</li> </ul>"},{"location":"key_binding/#working-on-text-and-code","title":"Working on text and code","text":""},{"location":"key_binding/#autocomplete","title":"Autocomplete","text":"<ul> <li><code>&lt;C-space&gt;</code> show autocompletion manually</li> <li><code>&lt;CR&gt;</code> select and accept</li> <li><code>&lt;C-p&gt;</code> select previous</li> <li><code>&lt;C-n&gt;</code> select next</li> <li><code>&lt;C-k&gt;</code> select signature</li> </ul>"},{"location":"key_binding/#autoformatter","title":"Autoformatter","text":"<ul> <li><code>&lt;leader&gt;f</code> format</li> </ul>"},{"location":"key_binding/#copilot","title":"Copilot","text":"<ul> <li><code>&lt;Tab&gt;</code> accept suggestion</li> <li><code>&lt;M-]&gt;</code> next suggestion</li> <li><code>&lt;M-[&gt;</code> previous suggestion</li> </ul>"},{"location":"key_binding/#flash","title":"Flash","text":"<ul> <li><code>s</code> flash</li> <li><code>S</code> flash treesitter</li> <li><code>r</code> remote flash</li> <li><code>R</code> treesitter search</li> <li><code>&lt;C-s&gt;</code> flash toggle</li> </ul>"},{"location":"key_binding/#text-editing","title":"Text editing","text":""},{"location":"key_binding/#around-inside-textobject","title":"Around &amp; Inside textobject","text":"<ul> <li><code>a</code> around</li> <li><code>i</code> inside</li> <li><code>g[</code> goto start of <code>a</code> textobject</li> <li><code>g]</code> goto end of <code>a</code> textobject</li> </ul>"},{"location":"key_binding/#move-selection","title":"Move selection","text":"<p>Move selection in visual mode or current line</p> <ul> <li><code>&lt;M-h&gt;</code> left</li> <li><code>&lt;M-j&gt;</code> down</li> <li><code>&lt;M-k&gt;</code> up</li> <li><code>&lt;M-l&gt;</code> right</li> </ul>"},{"location":"key_binding/#surround","title":"Surround","text":"<ul> <li><code>ys{motion}{char}</code> add surrounding in Normal and Visual modes</li> <li><code>ds{char}</code> delete surrounding</li> <li> <p><code>cs{target}{replacement}</code> replace surrounding</p> </li> <li> <p><code>l</code> suffix to search with \"prev\" method</p> </li> <li><code>n</code> suffix to search with \"next\" method</li> </ul>"},{"location":"key_binding/#treesitter","title":"Treesitter","text":""},{"location":"key_binding/#incremental-selection","title":"Incremental selection","text":"<ul> <li><code>&lt;C-space&gt;</code> init selection</li> <li><code>&lt;C-space&gt;</code> node incremental</li> <li><code>bs</code> node decremental</li> </ul>"},{"location":"key_binding/#textobjects","title":"Textobjects","text":"<ul> <li><code>af</code> select outer part of a method/function definition</li> <li><code>if</code> select inner part of a method/function definition</li> <li><code>ac</code> select outer part of a class</li> <li><code>ic</code> select inner part of a class</li> </ul>"},{"location":"key_binding/#swap-with-next-object","title":"Swap with next object","text":"<ul> <li><code>&lt;leader&gt;na</code> swap parameter/argument with next</li> <li><code>&lt;leader&gt;pa</code> swap parameter/argument with next</li> <li><code>&lt;leader&gt;nm</code> swap function with next</li> <li><code>&lt;leader&gt;pm</code> swap function with next</li> </ul>"},{"location":"key_binding/#move","title":"Move","text":"<ul> <li><code>]f</code> next method/function def start</li> <li><code>]F</code> next method/function def end</li> <li><code>]c</code> next class start</li> <li><code>]C</code> next class end</li> <li><code>]a</code> next parameter/argument start</li> <li> <p><code>]A</code> next parameter/argument end</p> </li> <li> <p><code>[f</code> prev method/function def start</p> </li> <li><code>[F</code> prev method/function def end</li> <li> <p><code>[c</code> prev class start</p> </li> <li> <p><code>[a</code> prev parameter/argument start</p> </li> <li><code>[A</code> prev parameter/argument end</li> </ul>"},{"location":"key_binding/#language-server-protocol","title":"Language Server Protocol","text":"<ul> <li><code>grn</code> rename variable</li> <li><code>gra</code> go to code action</li> <li><code>grr</code> go to references</li> <li><code>gri</code> go to implementation</li> <li><code>grd</code> go to definition</li> <li><code>grD</code> go to declaration</li> <li><code>grt</code> go to type definition</li> <li><code>&lt;leader&gt;ss</code> open document symbols</li> <li><code>&lt;leader&gt;sS</code> open workspace symbols</li> <li><code>&lt;leader&gt;th</code> toggle inlay hints</li> </ul>"},{"location":"key_binding/#read-eval-print-loop","title":"Read Eval Print Loop","text":"<ul> <li><code>&lt;space&gt;rc</code> send motion or visual</li> <li><code>&lt;space&gt;rf</code> send whole file</li> <li><code>&lt;space&gt;rl</code> send line below cursor</li> <li><code>&lt;space&gt;rms</code> send the marked chunked</li> <li><code>&lt;space&gt;rmc</code> marks text object</li> <li><code>&lt;space&gt;rmc</code> marks visual selection</li> <li><code>&lt;space&gt;rmd</code> removes set mark</li> <li><code>&lt;space&gt;r&lt;cr&gt;</code> sends a return to the REPL</li> <li><code>&lt;space&gt;r&lt;space&gt;</code> sends a <code>&lt;C-c&gt;</code> signal to the REPL</li> <li><code>&lt;space&gt;rq</code> exits the REPL</li> <li> <p><code>&lt;space&gt;rx</code> clears the REPL window</p> </li> <li> <p><code>&lt;space&gt;rs</code> open REPL for current or given filetype</p> </li> <li><code>&lt;space&gt;rr</code> restart the current REPL</li> <li><code>&lt;space&gt;rF</code> focuses on the repl for current or given filetype</li> <li><code>&lt;space&gt;rh</code> hide the repl window for current or given filetype</li> </ul>"},{"location":"key_binding/#testing","title":"Testing","text":"<ul> <li><code>&lt;leader&gt;tt</code> test run file</li> <li><code>&lt;leader&gt;tT</code> test run all test files</li> <li><code>&lt;leader&gt;tr</code> test run nearest</li> <li><code>&lt;leader&gt;tl</code> test run last</li> <li><code>&lt;leader&gt;ts</code> test toggle summary</li> <li><code>&lt;leader&gt;to</code> test show output</li> <li><code>&lt;leader&gt;tO</code> test toggle output panel</li> <li><code>&lt;leader&gt;tS</code> test stop</li> <li><code>&lt;leader&gt;tw</code> test toggle watch</li> </ul>"},{"location":"key_binding/#debug-adapter-protocol","title":"Debug Adapter Protocol","text":"<ul> <li><code>&lt;F5&gt;</code> start/continue</li> <li><code>&lt;F1&gt;</code> step into</li> <li><code>&lt;F2&gt;</code> step over</li> <li><code>&lt;F3&gt;</code> step out</li> <li><code>&lt;leader&gt;db</code> toggle breakpoint</li> <li><code>&lt;leader&gt;dB</code> set breakpoint condition</li> <li><code>&lt;leader&gt;dr</code> toggle REPL</li> <li><code>&lt;leader&gt;dq</code> toggle terminate debugger</li> <li> <p><code>&lt;leader&gt;du</code> toggle debugger ui</p> </li> <li> <p><code>&lt;leader&gt;dn</code> test method</p> </li> <li><code>&lt;leader&gt;df</code> test class</li> <li><code>&lt;leader&gt;ds</code> debug selection</li> </ul>"},{"location":"key_binding/#diagnostics","title":"Diagnostics","text":"<ul> <li><code>&lt;leader&gt;q</code> open diagnostic quickfix list</li> <li><code>]d</code> move next diagnostics in the current buffer</li> <li> <p><code>[d</code> move previous diagnostics in the current buffer</p> </li> <li> <p><code>&lt;leader&gt;xx</code> toggle trouble diagnostics</p> </li> <li><code>&lt;leader&gt;xX</code> toggle trouble diagnostics buffer</li> </ul>"},{"location":"key_binding/#markdown","title":"Markdown","text":"<ul> <li><code>&lt;leader&gt;m</code> toggle markdown rendering</li> </ul>"},{"location":"key_binding/#to-do-comments","title":"To-do comments","text":"<ul> <li><code>]t</code> move to next to-do comments</li> <li><code>[t</code> move to previous to-do comments</li> </ul>"},{"location":"key_binding/#undotree","title":"Undotree","text":"<ul> <li><code>&lt;leader&gt;u</code> toggle undotree (use <code>?</code> for help)</li> <li><code>J</code> move to the previous undo state</li> <li><code>K</code> move to the next undo state</li> </ul>"},{"location":"key_binding/#venv-selection","title":"Venv selection","text":"<ul> <li><code>&lt;leader&gt;v</code> search and activate a python virtual environment</li> </ul>"},{"location":"key_binding/#working-with-files-and-navigating-between-files","title":"Working with files and navigating between files","text":""},{"location":"key_binding/#harpoon","title":"Harpoon","text":"<ul> <li><code>&lt;leader&gt;h</code> attach harpoon to file</li> <li><code>&lt;C-e&gt;</code> open harpoon quick menu</li> <li><code>&lt;leader&gt;1-5</code> open harpoon file by index number</li> </ul>"},{"location":"key_binding/#oil","title":"Oil","text":"<ul> <li><code>-</code> open parent directory</li> </ul>"},{"location":"key_binding/#snacks","title":"Snacks","text":""},{"location":"key_binding/#top-pickers-explorer","title":"Top Pickers &amp; Explorer","text":"<ul> <li><code>&lt;leader&gt;&lt;space&gt;</code> smart find files</li> <li><code>&lt;leader&gt;,</code> buffers</li> <li><code>&lt;leader&gt;/</code> grep</li> <li><code>&lt;leader&gt;:</code> command history</li> <li><code>&lt;leader&gt;n</code> notification history</li> <li><code>&lt;leader&gt;e</code> file explorer</li> </ul>"},{"location":"key_binding/#find","title":"Find","text":"<ul> <li><code>&lt;leader&gt;fb</code> buffers</li> <li><code>&lt;leader&gt;fc</code> find config file</li> <li><code>&lt;leader&gt;fd</code> find dotfiles file</li> <li><code>&lt;leader&gt;ff</code> find files</li> <li><code>&lt;leader&gt;fg</code> find git files</li> <li><code>&lt;leader&gt;fp</code> projects</li> <li><code>&lt;leader&gt;fr</code> recent</li> </ul>"},{"location":"key_binding/#grep","title":"Grep","text":"<ul> <li><code>&lt;leader&gt;sb</code> buffer lines</li> <li><code>&lt;leader&gt;sb</code> grep open buffers</li> <li><code>&lt;leader&gt;sg</code> grep</li> <li><code>&lt;leader&gt;sw</code> visual selection or word</li> </ul>"},{"location":"key_binding/#search","title":"Search","text":"<ul> <li><code>&lt;leader&gt;s\"</code> registers</li> <li><code>&lt;leader&gt;s/</code> search history</li> <li><code>&lt;leader&gt;sa</code> autocmds</li> <li><code>&lt;leader&gt;sb</code> buffer lines</li> <li><code>&lt;leader&gt;sc</code> command history</li> <li><code>&lt;leader&gt;sC</code> commands</li> <li><code>&lt;leader&gt;sd</code> diagnostics</li> <li><code>&lt;leader&gt;sD</code> buffer diagnostics</li> <li><code>&lt;leader&gt;sh</code> help pages</li> <li><code>&lt;leader&gt;sH</code> highlights</li> <li><code>&lt;leader&gt;si</code> icons</li> <li><code>&lt;leader&gt;sj</code> jumps</li> <li><code>&lt;leader&gt;sk</code> keymaps</li> <li><code>&lt;leader&gt;sl</code> location list</li> <li><code>&lt;leader&gt;sm</code> marks</li> <li><code>&lt;leader&gt;sM</code> man pages</li> <li><code>&lt;leader&gt;sp</code> search for plugin spec</li> <li><code>&lt;leader&gt;sq</code> quickfix list</li> <li><code>&lt;leader&gt;sR</code> resume</li> <li><code>&lt;leader&gt;su</code> undo history</li> <li><code>&lt;leader&gt;uC</code> colorschemes</li> </ul>"},{"location":"key_binding/#tmux","title":"Tmux","text":"<ul> <li><code>&lt;prefix&gt;</code> key is <code>&lt;C-a&gt;</code></li> <li><code>&lt;prefix&gt;&lt;S-i&gt;</code> install new plugins</li> <li><code>&lt;prefix&gt;&lt;S-r&gt;</code> refresh config file</li> </ul>"},{"location":"key_binding/#attach-and-detach","title":"Attach and detach","text":"<ul> <li><code>tmux</code> start new tmux session</li> <li><code>tmux ls</code> list active tmux sessions</li> <li><code>tmux attach</code> attach to tmux session running in the background</li> <li><code>&lt;prefix&gt;d</code> detach from tmux session, leaving it running in the background</li> <li><code>&lt;prefix&gt;&amp;</code> exit and quit tmux</li> <li><code>&lt;prefix&gt;?</code> list all keybindings (press Q to exit help screen)</li> </ul>"},{"location":"key_binding/#window-management","title":"Window management","text":"<ul> <li><code>&lt;prefix&gt;c</code> create new window</li> <li><code>&lt;M-S-h&gt;</code> or <code>&lt;S-Left&gt;</code> move to previous window</li> <li><code>&lt;M-S-l&gt;</code> or <code>&lt;S-Right&gt;</code> move to next window</li> <li><code>&lt;prefix&gt;0-9</code> move to window by index number</li> </ul>"},{"location":"key_binding/#session-management","title":"Session management","text":"<ul> <li><code>&lt;prefix&gt;)</code> move to next session</li> <li><code>&lt;prefix&gt;(</code> move to previous session</li> <li><code>&lt;prefix&gt;&lt;C-z&gt;</code> suspend session</li> <li><code>&lt;prefix&gt;s</code> select a new session interactively</li> <li><code>&lt;prefix&gt;f</code> tmux sessionizer (<code>&lt;leader&gt;f</code> if not in tmux)</li> </ul>"},{"location":"key_binding/#panes-management","title":"Panes management","text":"<ul> <li><code>&lt;prefix&gt;%</code> split horizontally (panes side by side)</li> <li><code>&lt;prefix&gt;\"</code> split vertically (one pane below the other)</li> <li><code>&lt;prefix&gt;h-j-k-l</code> or <code>&lt;M-Up/Down/Left/Right&gt;</code> move to other pane</li> <li><code>&lt;prefix&gt;x</code> close current pane</li> <li><code>&lt;prefix&gt;!</code> remove all panes but the current one from the window</li> <li><code>&lt;prefix&gt;q</code> display window index numbers</li> <li><code>&lt;prefix&gt;&lt;Up/Down&gt;</code> resize current pane (due north/south)</li> <li><code>&lt;prefix&gt;&lt;Left/Right&gt;</code> resize current pane (due west/east)</li> </ul>"},{"location":"key_binding/#window-management_1","title":"Window Management","text":"<ul> <li><code>Mod</code> is the <code>Mod4</code> <code>(Super, Option on Mac)</code> key</li> </ul>"},{"location":"key_binding/#basic","title":"Basic","text":"<ul> <li><code>&lt;Mod-Return&gt;</code> start the terminal</li> <li><code>&lt;Mod-S-q&gt;</code> kill focused window</li> <li><code>&lt;Mod-d&gt;</code> start launcher</li> <li><code>&lt;Mod-S-c&gt;</code> reload configuration file</li> <li><code>&lt;Mod-S-e&gt;</code> exit session (logout)</li> </ul>"},{"location":"key_binding/#move-window-container-and-workspace","title":"Move window, container and workspace","text":"<ul> <li><code>&lt;Mod-Up/Down/Left/Right&gt;</code> move between window</li> <li><code>&lt;Mod-S-hjkl&gt;</code> move focused to another workspace (also work with arrow keys)</li> <li><code>&lt;Mod-(0-9)&gt;</code> move to workspace by index number</li> <li><code>&lt;Mod-S-(0-9)&gt;</code> move focused container to workspace by index number</li> <li><code>&lt;Mod-LeftMouse&gt;</code> (<code>&lt;Mod-CMD-LeftMouse&gt;</code> on MacOS) move a window with mouse</li> <li><code>&lt;Mod-RightMouse&gt;</code> (<code>&lt;Mod-CMD-RightMouse&gt;</code> on MacOS) resize a window with mouse</li> </ul>"},{"location":"key_binding/#layout","title":"Layout","text":"<ul> <li><code>&lt;Mod-b&gt;</code> split horizontally</li> <li><code>&lt;Mod-v&gt;</code> split vertically</li> <li><code>&lt;Mod-f&gt;</code> toggle the current focus fullscreen</li> </ul>"},{"location":"key_binding/#scratchpad","title":"Scratchpad","text":"<ul> <li><code>&lt;Mod-S-Minus&gt;</code> move the focused window to scratchpad</li> <li><code>&lt;Mod-Minus&gt;</code> toggle to scratchpad window</li> </ul>"},{"location":"key_binding/#git-integration","title":"Git Integration","text":""},{"location":"key_binding/#gitsigns","title":"Gitsigns","text":""},{"location":"key_binding/#navigation","title":"Navigation","text":"<ul> <li><code>]c</code> jump to next git change</li> <li><code>]c</code> jump to previous git change</li> </ul>"},{"location":"key_binding/#visual-mode","title":"Visual mode","text":"<ul> <li><code>&lt;leader&gt;gs</code> git stage hunk</li> <li><code>&lt;leader&gt;gr</code> git reset hunk</li> </ul>"},{"location":"key_binding/#normal-mode","title":"Normal mode","text":"<ul> <li><code>&lt;leader&gt;gs</code> git stage hunk</li> <li><code>&lt;leader&gt;gr</code> git reset hunk</li> <li><code>&lt;leader&gt;gu</code> git undo stage hunk</li> <li><code>&lt;leader&gt;gp</code> git preview hunk</li> <li><code>&lt;leader&gt;gS</code> git stage buffer</li> <li><code>&lt;leader&gt;gR</code> git reset buffer</li> <li><code>&lt;leader&gt;gb</code> git blame line</li> <li><code>&lt;leader&gt;gB</code> git blame</li> <li><code>&lt;leader&gt;gd</code> git diff against index</li> <li><code>&lt;leader&gt;gD</code> git diff against last commit</li> </ul>"},{"location":"key_binding/#toggles","title":"Toggles","text":"<ul> <li><code>&lt;leader&gt;gtb</code> toggle git show blame line</li> <li><code>&lt;leader&gt;gtD</code> toggle git show deleted</li> </ul>"},{"location":"key_binding/#git-worktree","title":"Git worktree","text":"<ul> <li><code>&lt;leader&gt;gw</code> git worktree menu</li> <li><code>&lt;leader&gt;gc</code> git create worktree</li> </ul>"},{"location":"key_binding/#fugitive","title":"Fugitive","text":"<ul> <li><code>:G</code> or <code>&lt;leader&gt;gg</code> open git summary window</li> <li><code>:G {git command}</code> equals to <code>git {git command}</code></li> </ul>"},{"location":"key_binding/#miscellaneous","title":"Miscellaneous","text":""},{"location":"key_binding/#obsidian","title":"Obsidian","text":""},{"location":"neovim/","title":"Neovim","text":"<p>Neovim is a highly-extensible keyboard-based editor.</p> <p>Inspired by https://github.com/nvim-lua/kickstart.nvim.</p>"},{"location":"neovim/#installation","title":"Installation","text":"<ul> <li>Install Neovim&gt;=0.11 (native LSP setup).</li> <li>Install the external dependencies.</li> </ul> <pre><code>sudo snap install nvim --classic\nsudo apt update\nsudo apt install make gcc ripgrep unzip git xclip, fd-find\n</code></pre> <p>For MacOS</p> <pre><code>brew install neovim\nbrew install ripgrep fd\n</code></pre>"},{"location":"neovim/#plugins","title":"Plugins","text":"<p>I use the plugin manager lazy.nvim to install all plugins. I also use mini.nvim and snacks.nvim, two collections of plugins for Neovim.</p> <p>\u2714\ufe0f: finished setup and documentation.</p> <p>\u274c: not setup properly and not documented.</p>"},{"location":"neovim/#working-on-text-and-code","title":"Working on text and code","text":"Name Purpose Dependencies Notes blink.nvim A completion plugin with support for LSPs and external sources \u2714\ufe0f conform.nvim Formatter plugin \u2714\ufe0f copilot.lua Github Copilot \u2714\ufe0f iron.nvim Interactive REPL (Read\u2013Eval\u2013Print Loop) \u2714\ufe0f mini.ai Extend and create <code>a/i</code> textobjects \u2714\ufe0f mini.move Move any selection in any direction \u2714\ufe0f mini.surround Fast and feature-rich surround actions \u2714\ufe0f neotest Run and interact with tests nvim-nio, plenary.nvim, FixCursorHold.nvim, nvim-treesitter, neotest-python \u2714\ufe0f nvim-autopairs Autocomplete autopairs, e.g. [],{},() etc. \u2714\ufe0f nvim-dap Debug Adapter Protocol client implementation nvim-dap-ui, nvim-nio, nvim-dap-virtual-text, nvim-dap-python \u2714\ufe0f nvim-lint Support linters which have no LSP support \u2714\ufe0f nvim-treesitter Parser generator tool and incremental parsing library nvim-treesitter-context, nvim-treesitter-textobjects \u2714\ufe0f render-markdown.nvim Improve viewing markdown files Markdown parser for treesitter \u2714\ufe0f snacks.indent Adds indentation guides even on blank lines \u2714\ufe0f todo-comments.nvim Highlight\u00a0your to-do comments in different styles plenary.nvim \u2714\ufe0f trouble.nvim Pretty list for diagnosis and more \u2714\ufe0f undotree Visualize undo history \u2714\ufe0f venv-selector.nvim Browse existing python virtual environments on your computer and select one to activate inside neovim. fd, telescope.nvim, nvim-dap nvim-dap-python, debugpy \u2714\ufe0f vim-sleuth Smart indentation style detection \u2714\ufe0f"},{"location":"neovim/#working-with-files-and-navigating-between-files","title":"Working with files and navigating between files","text":"Name Purpose Dependencies Notes snacks.explorer A file explorer \u2714\ufe0f harpoon Auto updating and editable marks utility for fast file navigation plenary.nvim \u2714\ufe0f oil.nvim File Explorer that lets you edit your filesystem like a normal Neovim buffer \u2714\ufe0f snacks.picker Picker for selecting items \u2714\ufe0f vim-tmux-navigator Seamless navigation between vim panes and tmux splits tmux \u2714\ufe0f"},{"location":"neovim/#git-integration","title":"Git Integration","text":"Name Purpose Dependencies Notes gitsigns.nvim Deep buffer integration for Git \u2714\ufe0f git-worktree.nvim A simple wrapper around git worktree operations, create, switch, and delete. \u274c lazygit Simple terminal UI for git commands snacks.lazygit \u2714\ufe0f"},{"location":"neovim/#miscellaneous","title":"Miscellaneous","text":"Name Purpose Dependencies Notes fidget.nvim Extensible UI for Neovim notifications and LSP progress messages \u2714\ufe0f lualine.nvim Fast and easy to configure Neovim statusline \u2714\ufe0f mini.icons File and folder icons \u2714\ufe0f obsidian.nvim Plugin for Obsidian \u274c which-key.nvim Show available keybindings in a popup as you type \u2714\ufe0f"},{"location":"neovim/#language-server-protocol-debug-adapter-protocol-linter-and-formatter","title":"Language Server Protocol, Debug Adapter Protocol, Linter and Formatter","text":"<p>The LSP (Language Server Protocol), DAP (Debug Adapter Protocol), Linter and Formatter will be installed by the package manager Mason (with dependencies: mason-tool-installer.nvim, mason-nvim-dap.nvim).</p> Name Language Purpose Notes bashls Bash, Sh, Zsh LSP It uses shellcheck, shfmt for linting and formatting. debugpy Python DAP harper_ls English  Linter Grammar Checker lua_ls Lua LSP lazydev.nvim is a plugin that properly configures LuaLS. prettier JSON, Markdown, YAML Formatter basedpyright Python LSP Need to install Node.js because Pyright is written in Typescript. LSP ty will be an alternative to basedpyright soon. ruff Python LSP, Linter and Formatter shellcheck Bash, Sh, Zsh Linter shfmt Bash, Sh, Zsh Formatter stylua Lua Formatter taplo TOML LSP, Linter and Formatter terraform_fmt Terraform Formatter terraform-ls Terraform LSP tflint Terraform LSP, Linter trivy All Linter Security Scanner ty Python LSP yamlls YAML LSP"},{"location":"python/","title":"Python tooling","text":"<p>This is a list of python tools which get installed. We use uv to manage our python tools in an isolated and persistent environment.</p> <p>Install uv via the standalone installer:</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Install python tools via uv:</p> <pre><code># commitizen\nuv tool install commitizen\n\n# ipython\nuv tool install ipython --with ipykernel\n\n# jupyter lab\nuv tool install jupyterlab\n\n# mkdocs material\nuv tool install mkdocs --with mkdocs-material\n\n# pre-commit\nuv tool install pre-commit\n\n# ruff\nuv tool install ruff\n\n# tox\nuv tool install tox --with tox-uv\n\n# ty\nuv tool install ty@latest\n</code></pre>"},{"location":"python/#tools","title":"Tools","text":"Name Description commitizen Commitizen is release management tool designed for teams ipython Python interactively with jupyter. jupyterlab An extensible environment for interactive and reproducible computing. mkdocs-material A powerful documentation framework on top of MkDocs pre-commit A framework for managing and maintaining multi-language pre-commit hooks ruff An extremely fast Python linter and code formatter uv An extremely fast Python package and project manager tox tox is a generic virtual environment management and test command line tool ty An extremely fast Python type checker and language server"},{"location":"tmux/","title":"Tmux","text":"<p>tmux is a terminal multiplexer. It enables a number of terminals to be created, accessed, and controlled from a single screen.</p>"},{"location":"tmux/#installation","title":"Installation","text":"<p>Install instructions</p> <p>Install tmux on Ubuntu:</p> <pre><code>sudo apt install tmux\n</code></pre> <p>Install tmux on MacOS:</p> <pre><code>brew install tmux\n</code></pre> <p>Setup the tmux plugin manager if it is not already installed:</p> <pre><code>rm -rf $HOME/.tmux/plugins/tpm  || true\nrm -rf $HOME/.config/tmux/plugins/tpm || true\ngit clone https://github.com/tmux-plugins/tpm $HOME/.config/tmux/plugins/tpm\n</code></pre> <p>Run this while in a tmux session</p> <pre><code>tmux source $HOME/.config/.tmux.conf\n# Install tmux plugins.\n$HOME/.config/tmux/plugins/tpm/scripts/install_plugins.sh\n</code></pre>"},{"location":"tmux/#plugins","title":"Plugins","text":"<p>The plugin manager is tpm.</p> Name Purpose Dependencies Notes tmux-logging Looging of all outputs in the current pane \u2714\ufe0f tmux-pain-control Controlling and navigating panes \u2714\ufe0f tmux-resurrect Persists tmux environment across system restarts \u2714\ufe0f tmux-sensible A set of sensible default options \u2714\ufe0f tmux-yank Copy to the system clipboard xsel \u2714\ufe0f tmux-continuum Continuous saving of tmux environment. Automatic restore when tmux is started. Automatic tmux start when computer is turned on. tmux-resurrect \u2714\ufe0f vim-tmux-navigator Seamless navigation between vim panes and tmux splits \u2714\ufe0f tmux-gruvbox Gruvbox color scheme for Tmux \u2714\ufe0f"},{"location":"window_manager/","title":"Window manager","text":"<p>Sway is a tiling Wayland compositor and a drop-in replacement for the i3 window manager for X11. For MacOS, use the i3-inspired alternative Aerospace. To install sway use the following commands:</p> <pre><code>sudo apt install sway\n</code></pre> <p>To install aerospace for MacOS use the following commands:</p> <pre><code>brew install --cask nikitabobko/tap/aerospace\n\n# Move windows by holding ctrl + cmd and dragging any part of the window (not necessarily the window title)\ndefaults write -g NSWindowShouldDragOnGesture -bool true\n\n# Disable windows opening animations\ndefaults write -g NSAutomaticWindowAnimationsEnabled -bool false\n</code></pre>"},{"location":"window_manager/#sketchybar","title":"Sketchybar","text":"<p>Sketchybar is a highly customizable macOS status bar replacement.</p> <p>Install instructions</p> <pre><code>brew tap FelixKratz/formulae\nbrew install sketchybar\n</code></pre> <p>When you use/create additional plugins, make sure that they are made executable via</p> <pre><code>chmod +x $HOME/.config/sketchybar/plugins/*\n</code></pre>"},{"location":"zsh/","title":"Zsh","text":"<p>Zsh is a powerful shell that operates as both an interactive shell and as a scripting language interpreter.</p> <p>Install instruction</p>"},{"location":"zsh/#plugins","title":"Plugins","text":"<p>I use the plugin manager zinit.</p> Name Description fzf fzf is a general-purpose command-line fuzzy finder fzf-tab Replace zsh's default completion selection menu with fzf powerlevel10k A theme for Zsh zsh-autosuggestions Fish-like autosuggestions for Zsh zsh-completions Additional completion definitions for Zsh zsh-history-substring-search Zsh port of Fish history search zsh-syntax-highlighting Fish shell like syntax highlighting for Zsh zoxide A smarter cd command"}]}